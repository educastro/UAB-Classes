/**
 * 
 */
package decorator;

import java.io.IOException;
import java.io.Reader;

import strategy.Cipher;


public class DecryptingReader extends ReaderDecorator {
	//the reader property
	Reader reader;
	//the cipher property
	Cipher cipher;
	

	/**
	 * Construct an decrypting reader that decorates a given reader
	 * 
	 * @param reader
	 *            the reader to decorate
	 */
	public DecryptingReader(Reader reader, Cipher cipher) {
		//set the reader 
		this.reader = reader;
		//set the cipher
		this.cipher = cipher;
	}

	@Override
	public int read(char[] cbuf, int off, int len) throws IOException {
		int result = 0;
		//read into the buffer, put the result into the result int
		result = reader.read(cbuf, off, len);
		//decrypt the buffer
		cipher.decrypt(cbuf);
		//return the integer result
		return result;
	}
	
	public void decrypt(char[] cbuf){
		cipher.decrypt(cbuf);
	}
	
	@Override
	public int read(char[] cbuf) throws IOException {
		int result = 0;
		//read into the buffer, put the result into the result int
		result = reader.read(cbuf);
		//decrypt the buffer
		cipher.decrypt(cbuf);
		//return the integer result
		return result;
	}


	@Override
	public void close() throws IOException {
		//close the reader
		reader.close();
	}

}
