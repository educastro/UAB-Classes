package lab10;


import java.util.Scanner;
import java.util.StringTokenizer;
import java.lang.reflect.*;

/**
 * Class that takes in input as the class name followed by its constructor
 * parameters.
 * 
 */
public class ReflectionLab {

	public static void main(String[] args) {


		Scanner scanner = new Scanner(System.in);

		// get the input from the user as space separated values
		String constructorInput = scanner.nextLine();

		// split from ' '
		// String[] splitsInput = constructorInput.split(" ");
		// Commented the previous lines and replaced it for a StringTokenizer instance because
		// it is much easier.
		StringTokenizer constructorInputTokenized = new StringTokenizer(constructorInput);


		//		for(String split: splitsInput){
		//			System.out.println(split);
		//		}
		while(constructorInputTokenized.hasMoreTokens()){
			System.out.println(constructorInputTokenized.nextToken().toString());
		}


		//TODO work with splitsInput and then use Reflection API to
		//create an object of that type using that particular constructor


		scanner.close();
	}

	/**
	 * Get the object of the class type out of the string token.
	 * 
	 * @param type
	 *            - type representing the class type of the string token
	 * @param value
	 *            - the string token to parse into the appropriate type
	 * @return the object representing the string token
	 * 
	 * @precondition value!=null and type!=null and type is one of integer,
	 *               float, double, boolean, character or string itself
	 */
	@SuppressWarnings("rawtypes")
	public static Object getObject(Class type, String value) {
		if (Integer.class.equals(type) || int.class == type) {
			return Integer.parseInt(value);
		} else if (Float.class.equals(type) || float.class == type) {
			return Float.parseFloat(value);
		} else if (Long.class.equals(type) || long.class == type) {
			return Long.parseLong(value);
		} else if (Double.class.equals(type) || double.class == type) {
			return Double.parseDouble(value);
		} else if (Boolean.class.equals(type) || boolean.class == type) {
			return Boolean.parseBoolean(value);
		} else if (Character.class.equals(type) || char.class == type) {
			return value.charAt(0);
		} else {
			return value; // at the end we assume its just a plain simple String
		}
	}
}
